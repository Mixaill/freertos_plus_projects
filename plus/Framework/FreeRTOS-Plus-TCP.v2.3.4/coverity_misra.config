// MISRA C-2012 Rules

{
    version : "2.0",
    standard : "c2012",
    title: "Coverity MISRA Configuration",
    deviations : [
        // Disable the following rules.
        {
            deviation: "Directive 4.5",
            reason: "Allow names that MISRA considers ambiguous (such as enum IOT_MQTT_CONNECT and function IotMqtt_Connect)."
        },
        {
            deviation: "Directive 4.8",
            reason: "Allow inclusion of unused types. Header files for a specific port, which are needed by all files, may define types that are not used by a specific file."
        },
        {
            deviation: "Directive 4.9",
            reason: "Allow inclusion of function like macros. Logging is done using function like macros."
        },
        {
            deviation: "Rule 2.4",
            reason: "Allow unused tags. Some compilers warn if types are not tagged."
        },
        {
            deviation: "Rule 2.5",
            reason: "Allow unused macros. Library headers may define macros intended for the application's use, but not used by a specific file."
        },
        {
            deviation: "Rule 3.1",
            reason: "Allow nested comments. Documentation blocks contain comments for example code."
        },
        {
            deviation: "Rule 11.5",
            reason: "Allow casts from void *. Contexts are passed as void * and must be cast to the correct data type before use."
        },
        {
            deviation: "Rule 21.1",
            reason: "Allow use of all names."
        },
        {
            deviation: "Rule 21.2",
            reason: "Allow use of all names."
        },
        // Additions for FreeRTOS+TCP.
        /* General comment:
         * Network packets are received and sent as arrays of bytes.
         * Care has been taken to always have these arrays 32-bit aligned.
         * We decided to cast these arrays to structs and unions, so that
		 * numbers can be read and written with the primitive assembler
		 * instruction (LDR, STR in case of ARM).
		 * This approach made the code very efficient.  Beside that, the
		 * use of structs and union make the code easier to understand.
         * One example is: pxTCPPacket->xTCPHeader.ucTCPFlags, the TCP flags.
         * All numbers will be converted to the correct endianness using
		 * ntohs(), nothl(), and vv. These macros depend on 'ipconfigBYTE_ORDER'.
         *
         * 
         */
        {
            deviation: "Rule 21.15",  // Required, Decidable
            // Rule 21.15 the pointer arguments to the Standard Library functions
            //     memcpy, memmove and memcmp shall be pointers to qualified or unqualified
            //     versions of compatible types.
            // memcpy() and memcmp() are called intentionally with given types.
            // This can not be solved by casting the pointers to "void *"
            // The value of the length parameter has been verified carefully,
            // often the length is determined with sizeof().
            reason: "Allow calling memcpy() and memcmp() with incompatible types."
        },
        {
            deviation: "Rule 11.3",  // Required, Decidable
            // Rule 11.3 an object with pointer type shall not be converted to a pointer
            //     to a different object type.
            // Casting pointers is necessary when using with the model described above.
            // In most occasions, 'uint8_t*' is cast to some struct describing a packet:
            //    TCPPacket_t *pxTCPPacket = ( TCPPacket_t * ) pucEthernetBuffer;
            // where 'pucEthernetBuffer' always has a known aligment.
            reason: "Allow casting of pointers."
        },
        {
            deviation: "Rule 1.2",    // Advisory, Undecidable
            // Rule-1.2 Language extensions should not be used.
            // Many implementations of configASSERT() use __FUNCTION__ and __LINE__
            // for debugging purposes.
            // configASSERT is defined outside the FreeRTOS+TCP library.
            reason: "__FUNCTION__ can be useful for configASSERT()."
        },
        {
            deviation: "Rule 2.2",    // Required, Undecidable
            // Rule 2.2 There shall be no dead code
            // Where possible, we tried to apply this rule.
            // There is one exception: so-called *static-inline* functions.
            // They're like a library. It would produce ugly constructions
            // to declare them conditionally.
            reason: "It is a library, hard to tell if a function will never be called."
        },
        {
            deviation: "Rule 8.7",    // Advisory, Decidable
            // Rule 8.7 Functions and objects should not be defined with external
            //     linkage if they are referenced in only one translation unit
            // We're checking a library, not an application. A library may have
            // data and functions that are not always called.
            reason: "Function FreeRTOS_connstatus has external linkage but is only used in one translation unit."
        },
        {
            deviation: "Rule 21.8",    // Required, Decidable
            // Rule 21.8 the library functions abort, exit,  and system of <stdlib.h>
            //     shall not be used
            // The function 'abort()' is called in some implementations of configASSERT(),
            // which is beyond the scope of the TCP-library.
            reason: "The function abort should not be used."
        },
        {
            deviation: "Rule 19.2",    // Advisory, Decidable
            // Rule 19.2 the union keyword should not be used
            // The FreeRTOS+TCP library makes use of union's to map them onto the raw network packets.
            reason: "The library could do without unions, but the complexity would increase a lot."
        },
        {
            deviation: "Rule 20.1",    // Advisory,Decidable
            // Rule 20.1 #include directives should only be preceded by preprocessor directives or comments
            // The warning is triggered by the header files "pack_struct_start.h" and "pack_struct_end.h"
            reason: "The includes are necessary to get packed struct's, which is compiler-dependant."
        },
        {
            deviation: "Rule 10.8",    // Required, Decidable
            // Rule 10.8 the value of a composite expression shall not be cast to a
            //     different essential type category or a wider essential type.
            // Cast of composite expression of essential type unsigned to essential type signed
            reason: " problem is that config macros are often written without a U suffix to make it unsigned"
        },
        {
            deviation: "Rule 10.4",    // Required, Decidable
            // Rule 10.4 both operands of an operator in which the usual arithmetic conversions
            //     are performed shall have the same essential type category.
            // Essential type of the left hand operand "1000U" (unsigned) is not the same as that of
            // the right operand "100U"(signed). Very hard to solve, unless we can re-write the user's
            // configuration files.
            reason: "Same problem as 10.8: config macros are often written without a U soffix to make it unsigned."
        },
        {
            deviation: "Rule 8.6",    // Required, Decidable
            // Rule 8.6 An identifier with external  linkage shall have exactly one external definition
            // E.g. "ulApplicationGetNextSequenceNumber" is declared but never defined.
            // The rule can't be made silent in the usual way: /* coverity[misra_c_2012_rule_8_6_violation] */
            reason: "Application hooks are defined outside the library."
        },
        {
            deviation: "Rule 8.13",    // Advisory, Undecidable
            // Rule 8.13 A pointer should point to a const-qualified type whenever possible.
            // All pointers were made const as far as possible.
            // An exception was made for 3 public API's, e.g. FreeRTOS_sendto().
            // Another exception was made for the pointer typedef Socket_t, because that
            // could have side effects.
            reason: "Application hooks are defined outside the library."
        },
        {
            deviation: "Rule 8.5",    // Advisory, Decidable
            // Rule 8.13 an external object or function shall be declared once in one and only one file
            // For example: "FreeRTOS_connect" is declared more than once.
            // It sayd the same about all public API's
            // Can solve
            reason: "Don't know a proper way to avoid this issue, analysis looks buggy to me."
        }
    ]
}

